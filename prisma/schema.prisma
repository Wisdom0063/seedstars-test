// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model CustomerSegment {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  personas          Persona[]
  valuePropositions ValueProposition[]

  @@map("customer_segments")
}

model Persona {
  id          String   @id @default(cuid())
  name        String
  age         Int?
  gender      String?
  location    String?
  education   String?
  incomePerMonth String?
  
  // Pain Points
  painPoints  String?  // JSON array of pain points
  
  // Purchasing Behavior
  purchasingBehavior String? // JSON object with purchasing details
  
  // Channels
  channels    String?  // JSON array of preferred channels
  
  // Quote/Description
  quote       String?
  description String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Reference to customer segment
  segmentId   String
  segment     CustomerSegment @relation(fields: [segmentId], references: [id], onDelete: Cascade)

  // Value propositions linked to this persona
  valuePropositions ValueProposition[]

  @@map("personas")
}

model ValueProposition {
  id          String   @id @default(cuid())
  tags        String?  // JSON array of tags
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?

  // Link to Customer Segment/Persona
  segmentId   String
  segment     CustomerSegment @relation(fields: [segmentId], references: [id], onDelete: Cascade)
  
  // Link to specific Persona (optional - can be segment-wide or persona-specific)
  personaId   String?
  persona     Persona? @relation(fields: [personaId], references: [id], onDelete: Cascade)

  // Value Proposition Canvas Components
  customerJobs      CustomerJob[]
  customerPains     CustomerPain[]
  gainCreators      GainCreator[]
  painRelievers     PainReliever[]
  productsServices  ProductService[]
  
  // Value Proposition Statements
  valuePropositionStatements ValuePropositionStatement[]

  @@map("value_propositions")
}

model CustomerJob {
  id          String   @id @default(cuid())
  title       String
  description String
  importance  JobImportance
  category    JobCategory?
  order       Int      @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Link to Value Proposition
  valuePropositionId String
  valueProposition   ValueProposition @relation(fields: [valuePropositionId], references: [id], onDelete: Cascade)

  @@map("customer_jobs")
}

model CustomerPain {
  id          String   @id @default(cuid())
  title       String
  description String
  severity    PainSeverity
  category    PainCategory?
  order       Int      @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Link to Value Proposition
  valuePropositionId String
  valueProposition   ValueProposition @relation(fields: [valuePropositionId], references: [id], onDelete: Cascade)

  @@map("customer_pains")
}

model GainCreator {
  id          String   @id @default(cuid())
  title       String
  description String
  priority    GainPriority
  category    GainCategory?
  order       Int      @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Link to Value Proposition
  valuePropositionId String
  valueProposition   ValueProposition @relation(fields: [valuePropositionId], references: [id], onDelete: Cascade)

  @@map("gain_creators")
}

model PainReliever {
  id          String   @id @default(cuid())
  title       String
  description String
  priority    RelieverPriority
  category    RelieverCategory?
  order       Int      @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Link to Value Proposition
  valuePropositionId String
  valueProposition   ValueProposition @relation(fields: [valuePropositionId], references: [id], onDelete: Cascade)

  @@map("pain_relievers")
}

model ProductService {
  id          String   @id @default(cuid())
  name        String
  description String
  type        ProductType
  category    String?
  features    String?  // JSON array of features
  order       Int      @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  valuePropositionId String
  valueProposition   ValueProposition @relation(fields: [valuePropositionId], references: [id], onDelete: Cascade)

  @@map("products_services")
}

model ValuePropositionStatement {
  id          String   @id @default(cuid())
  offering    String   // What we offer (e.g., "Provide toys", "Providing children milk")
  description String   // How we deliver value (e.g., "Provide toys", "Providing children milk")
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Link to Value Proposition
  valuePropositionId String
  valueProposition   ValueProposition @relation(fields: [valuePropositionId], references: [id], onDelete: Cascade)

  // Business models linked to this value proposition statement
  businessModels BusinessModel[]

  @@map("value_proposition_statements")
}

model BusinessModel {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  valuePropositionStatementId String
  valuePropositionStatement   ValuePropositionStatement @relation(fields: [valuePropositionStatementId], references: [id], onDelete: Cascade)
    keyPartners   String? // JSON array - Key Partners - who are our key partners and suppliers
  keyActivities String? // JSON array - Key Activities - what key activities does our value proposition require
  keyResources  String? // JSON array - Key Resources - what key resources does our value proposition require
  
  customerRelationships String? // JSON array - Customer Relationships - what type of relationship does each customer segment expect
  channels              String? // JSON array - Channels - through which channels do we want to reach our customer segments
  customerSegments      String? // JSON array - Customer Segments - for whom are we creating value (derived from value proposition)
  
  costStructure    String? // JSON array - Cost Structure - what are the most important costs inherent in our business model
  revenueStreams   String? // JSON array - Revenue Streams - for what value are our customers really willing to pay

  tags        String? // JSON array - Tags for categorization
  notes       String?  // Additional notes
  
  createdBy String?
  updatedBy String?

  @@map("business_models")
}

model View {
  id          String   @id @default(cuid())
  name        String
  description String?
  isDefault   Boolean  @default(false)
  
  // View source - what type of data this view displays
  source      ViewSource 
  
  // View configuration
  layout      ViewLayout @default(CARD)
  
  // Filters (JSON)
  filters     String?  // JSON object with filter criteria
  
  // Active user selections (JSON)
  activeFilters String? // JSON object with current active filter selections
  activeSorts   String? // JSON array with current active sort selections
  
  // Sorting
  sortBy      String?  // Field to sort by
  sortOrder   SortOrder @default(ASC)
  
  // Grouping
  groupBy     String?  // Field to group by
  
  // Visible columns/fields (JSON array)
  visibleFields String? // JSON array of field names
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("views")
}

enum ViewSource {
  PERSONAS
  VALUE_PROPOSITIONS
  BUSINESS_MODELS
}

enum ViewLayout {
  CARD
  TABLE
  KANBAN
}

enum SortOrder {
  ASC
  DESC
}

// Value Proposition Enums
enum ValuePropositionStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum JobImportance {
  VERY_IMPORTANT
  FAIRLY_IMPORTANT
  NOT_IMPORTANT
}

enum JobCategory {
  FUNCTIONAL
  EMOTIONAL
  SOCIAL
}

enum PainSeverity {
  EXTREME_PAIN
  MODERATE_PAIN
  LOW_PAIN
}

enum PainCategory {
  UNDESIRED_OUTCOMES
  OBSTACLES
  RISKS
}

enum GainPriority {
  VERY_ESSENTIAL
  FAIRLY_ESSENTIAL
  NOT_ESSENTIAL
}

enum GainCategory {
  REQUIRED_GAINS
  EXPECTED_GAINS
  DESIRED_GAINS
  UNEXPECTED_GAINS
}

enum RelieverPriority {
  VERY_ESSENTIAL
  FAIRLY_ESSENTIAL
  NOT_ESSENTIAL
}

enum RelieverCategory {
  PAIN_KILLER
  GAIN_CREATOR
  VITAMIN
}

enum ProductType {
  PRODUCT
  SERVICE
  DIGITAL
  PHYSICAL
}
